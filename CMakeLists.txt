cmake_minimum_required(VERSION 3.20)

# Project name
project(WizardChess)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Source files
set(SOURCE_FILES
    src/main.cpp
    src/Model.cpp
    src/WizardChess.cpp
    src/MemoryTracker.cpp
    src/VulkanDeviceManager.cpp
    src/VulkanSurfaceManager.cpp
)

# Header files
set(HEADER_FILES
    include/main.h
    include/Debug.h
    include/Model.h
    include/Types.h
    include/BmpUtils.h
    include/Utils.h
    include/MemoryTracker.h
    include/VulkanHelper.h
    include/VulkanDeviceManager.h
    include/VulkanSurfaceManager.h
    include/WizardChess.h
)

# Shader files
set(SHADER_SOURCE_FILES
    ${CMAKE_SOURCE_DIR}/assets/shaders/shader.frag
    ${CMAKE_SOURCE_DIR}/assets/shaders/shader.vert
    ${CMAKE_SOURCE_DIR}/assets/shaders/shadow.frag
    ${CMAKE_SOURCE_DIR}/assets/shaders/shadow.vert
    ${CMAKE_SOURCE_DIR}/assets/shaders/select.frag
    ${CMAKE_SOURCE_DIR}/assets/shaders/select.vert
)

# Organize shader files in the Visual Studio solution
source_group("Shaders" FILES ${SHADER_SOURCE_FILES})

# Custom command to compile shaders
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/compiled_shaders/frag.spv
    OUTPUT ${CMAKE_BINARY_DIR}/compiled_shaders/vert.spv
    OUTPUT ${CMAKE_BINARY_DIR}/compiled_shaders/shadow_frag.spv
    OUTPUT ${CMAKE_BINARY_DIR}/compiled_shaders/shadow_vert.spv
    OUTPUT ${CMAKE_BINARY_DIR}/compiled_shaders/select_frag.spv
    OUTPUT ${CMAKE_BINARY_DIR}/compiled_shaders/select_vert.spv
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/shaders
    COMMAND ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat ${CMAKE_SOURCE_DIR}/assets/shaders/shader.frag ${CMAKE_BINARY_DIR}/compiled_shaders/frag.spv
    COMMAND ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat ${CMAKE_SOURCE_DIR}/assets/shaders/shader.vert ${CMAKE_BINARY_DIR}/compiled_shaders/vert.spv
    COMMAND ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat ${CMAKE_SOURCE_DIR}/assets/shaders/shadow.frag ${CMAKE_BINARY_DIR}/compiled_shaders/shadow_frag.spv
    COMMAND ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat ${CMAKE_SOURCE_DIR}/assets/shaders/shadow.vert ${CMAKE_BINARY_DIR}/compiled_shaders/shadow_vert.spv
    COMMAND ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat ${CMAKE_SOURCE_DIR}/assets/shaders/select.frag ${CMAKE_BINARY_DIR}/compiled_shaders/select_frag.spv
    COMMAND ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat ${CMAKE_SOURCE_DIR}/assets/shaders/select.vert ${CMAKE_BINARY_DIR}/compiled_shaders/select_vert.spv
    DEPENDS ${SHADER_SOURCE_FILES}
    COMMENT "Compiling shaders into ${CMAKE_BINARY_DIR}/shaders"
)

# Add executable, including shaders to make them visible in the solution explorer
add_executable(${PROJECT_NAME}
    ${SOURCE_FILES}
    ${HEADER_FILES}
    ${SHADER_SOURCE_FILES}
)

# Include paths
target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_SOURCE_DIR}/include
    $ENV{VULKAN_SDK}/Include
    ${CMAKE_SOURCE_DIR}/extern/glfw-3.4.bin.WIN64/include
)

# Library paths
target_link_directories(${PROJECT_NAME} PRIVATE
    $ENV{VULKAN_SDK}/Lib
    ${CMAKE_SOURCE_DIR}/extern/glfw-3.4.bin.WIN64/lib-vc2022
)

# Link libraries
target_link_libraries(${PROJECT_NAME}
    glfw3.lib
    vulkan-1.lib
)

# Ensure shaders are compiled before build
add_custom_target(Shaders
    DEPENDS ${CMAKE_SOURCE_DIR}/assets/shaders/compile.bat
    DEPENDS ${SHADER_SOURCE_FILES}
    DEPENDS ${CMAKE_BINARY_DIR}/compiled_shaders/frag.spv
    DEPENDS ${CMAKE_BINARY_DIR}/compiled_shaders/vert.spv
    DEPENDS ${CMAKE_BINARY_DIR}/compiled_shaders/shadow_frag.spv
    DEPENDS ${CMAKE_BINARY_DIR}/compiled_shaders/shadow_vert.spv
    DEPENDS ${CMAKE_BINARY_DIR}/compiled_shaders/select_frag.spv
    DEPENDS ${CMAKE_BINARY_DIR}/compiled_shaders/select_vert.spv
)
add_dependencies(${PROJECT_NAME} Shaders)

# Set Visual Studio startup project
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})

# Define asset paths for compile-time literal strings in C++
target_compile_definitions(${PROJECT_NAME} PRIVATE TEXTURE_PATH="${CMAKE_SOURCE_DIR}/assets/textures/")
target_compile_definitions(${PROJECT_NAME} PRIVATE MODEL_PATH="${CMAKE_SOURCE_DIR}/assets/models/")
target_compile_definitions(${PROJECT_NAME} PRIVATE COMPILED_SHADER_ROOT="${CMAKE_BINARY_DIR}/compiled_shaders/")

if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4 /WX)
    target_compile_options(${PROJECT_NAME} PRIVATE /std:c++17 /Zc:__cplusplus)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic -Werror)
endif()
